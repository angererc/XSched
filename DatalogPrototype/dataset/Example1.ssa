class Example1 extends java.lang.Object
{
    java.util.Vector out;

    public void process(java.lang.Object)
    {
        Example1 r0;
        java.lang.Object r1, $r3;
        Activation $r2;

        r0 := @this: Example1;
        r1 := @parameter0: java.lang.Object;
        $r2 = now;
        $r3 = //complex computation

        $r2.<Activation: java.lang.Object result> = $r3;
        return;
    }

    public void write(Activation)
    {
        Example1 r0;
        Activation r1;
        java.util.Vector $r2;
        java.lang.Object $r3;

        r0 := @this: Example1;
        r1 := @parameter0: Activation;

        $r2 = r0.<Example1: java.util.Vector out>;
        $r3 = r1.<Activation: java.lang.Object result>;
		r2.elements += $r3
        return;
    }

    public void writeToOut(java.util.Vector)
    {
        Example1 r0;
        java.util.Vector r1;
        Activation r2, r3, r6, r7, r2_1, r3_1, r2_2, r3_2;
        java.lang.Object r5;
        boolean $z0;

        r0 := @this: Example1;
        r1 := @parameter0: java.util.Vector;
        r2 = <Activation: Activation now>;
        r3 = <Activation: Activation now>;

     label0:
        r2_1 = Phi(r2, r2_2);
        r3_1 = Phi(r3, r3_2);

        $z0 = //has next, true or false
        if $z0 == 0 goto label1;

        r5 = oneOf r1.elements
        
		r6 = sched r0.process(r5);
		r7 = sched r0.write(r6);
		
        r2_1 -> r6;
		r6 -> r7;
		r3_1 -> r7;
		
		r2_2 = r6;
		r3_2 = r7;
		
        goto label0;

     label1:
        return;
    }
}