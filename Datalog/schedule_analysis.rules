
#************************************
# ordered-ness of activations
#************************************

#there can be activations that are only ordered (in ordered0) but not orderedBefore. mix those into the ordered relation
ordered(t:T0, a:A0, b:A1) 
ordered(t, a, b) :- ordered0(t, a, b).
ordered(t, a, b) :- orderedBefore(t, a, b).
ordered(t, a, b) :- orderedBefore(t, b, a).
ordered(t, a, b) :- ordered(t, b, a).

#************************************
# infos about parameter flows
#************************************

#in t, actual is a direct parameter to a and mapped to formal in a's task ta
param(t:T0, a:A0, actual:A1, ta:T1, formal:A2)
param(t, a, actual, ta, formal) :- actual0(t, a, n, actual), schedules0(t, a, ta), formal0(ta, n, formal).

#used in negations, where you cannot really use _ (bug in bddbddb? or some concept I don't understand?)
isParam(t:T0, a:A0, param:A1)
isParam(t, a, actual) :- param(t, a, actual, _, _).

#in t, b is the parameter or ordered after the parameter that is mapped to formal in ta
paramOrAfter(t:T0, a:A0, b:A1, ta:T1, formal:A2)
paramOrAfter(t, a, actual, ta, formal) :- param(t, a, actual, ta, formal).
paramOrAfter(t, a, after, ta, formal) :- param(t, a, actual, ta, formal), orderedBefore(t, actual, after).

isParamOrAfter(t:T0, a:A0, b:A1)
isParamOrAfter(t, a, b) :- paramOrAfter(t, a, b, _, _).

paramOrBefore(t:T0, a:A0, b:A1, ta:T1, formal:A2)
paramOrBefore(t, a, actual, ta, formal) :- param(t, a, actual, ta, formal).
paramOrBefore(t, a, before, ta, formal) :- param(t, a, actual, ta, formal), orderedBefore(t, before, actual).

isParamOrBefore(t:T0, a:A0, b:A1)
isParamOrBefore(t, a, b) :- paramOrBefore(t, a, b, _, _).

#************************************
# tasks not ordered computation
#************************************

children(t:T0, res:T1)
children(t, res) :- schedules0(t, _, res).
children(t, res2) :- children(t, res1), children(res1, res2).

contains(t:T0, a:A0, b:A1)
contains(t, a, b) :- schedules0(t, a, _), schedules0(t, b, _).
contains(t, a, b) :- formal0(t, _, a), formal0(t, _, b).
contains(t, a, b) :- schedules0(t, a, _), formal0(t, _, b).
contains(t, a, b) :- contains(t, b, a).

tasksNotOrderedBefore(t:T0, b:A0, res:T1) outputtuples
tasksNotOrderedBefore(t, b, res) :- \
			contains(t, a, b), \
			!singleton(t, a, b), \
			!orderedBefore(t, a, b), \
			schedules0(t, a, res).
tasksNotOrderedBefore(t, b, res) :- \
			contains(t, a, b), \
			!singleton(t, a, b), \
			paramOrAfter(t, a, b, ta, formal), \
			tasksNotOrderedBefore(ta, formal, res).
tasksNotOrderedBefore(t, b, res) :- \
			contains(t, a, b), \
			!singleton(t, a, b), \
			!isParamOrAfter(t, a, b), \
			schedules0(t, a, ta), \
			children(ta, res).
tasksNotOrderedBefore(t, b, res) :- \
			schedules0(t, b, tb), \
			children(tb, res).

tasksNotOrderedAfter(t:T0, b:A0, res:T1) outputtuples
tasksNotOrderedAfter(t, b, res) :- contains(t, a, b), !singleton(t, a, b), !orderedBefore(t, b, a), schedules0(t, a, res).
tasksNotOrderedAfter(t, b, res) :- contains(t, a, b), !singleton(t, a, b), paramOrBefore(t, a, b, ta, formal), tasksNotOrderedAfter(ta, formal, res).
tasksNotOrderedAfter(t, b, res) :- contains(t, a, b), !singleton(t, a, b), !isParamOrBefore(t, a, b), !orderedBefore(t, b, a), schedules0(t, a, ta), children(ta, res).

tasksNotOrdered(t:T0, b:A0, res:T1) outputtuples
tasksNotOrdered(t, b, res) :- contains(t, a, b), !singleton(t, a, b), !ordered(t, a, b), schedules0(t, a, res).
tasksNotOrdered(t, b, res) :- contains(t, a, b), !singleton(t, a, b), param(t, a, b, ta, formal), tasksNotOrdered(ta, formal, res).
tasksNotOrdered(t, b, res) :- \
			contains(t, a, b), \
			!singleton(t, a, b), \
			!isParam(t, a, b), \
			paramOrAfter(t, a, b, ta, formal), \
			tasksNotOrderedBefore(ta, formal, res).
tasksNotOrdered(t, b, res) :- \
			contains(t, a, b), \
			!singleton(t, a, b), \
			!isParam(t, a, b), \
			paramOrBefore(t, a, b, ta, formal), \
			tasksNotOrderedAfter(ta, formal, res).
tasksNotOrdered(t, b, res) :- \
			contains(t, a, b), \
			!singleton(t, a, b), \
			!isParam(t, a, b), \
			!isParamOrAfter(t, a, b), \
			!isParamOrBefore(t, a, b), \
			!orderedBefore(t, b, a), \
			schedules0(t, a, ta), \
			children(ta, res).

parallel(t1:T0, t1:T1)
parallel(t1, t2) :-	schedules0(t, a, t1), tasksNotOrdered(t, a, t2).
parallel(t1, t2) :-	contains(t, a, b), !singleton(t, a, b), schedules0(t, a, ta), schedules0(t, b, tb), children(ta, t1), children(tb, t2).
parallel(t1, t2) :- parallel(t2, t1).