.include "basedir.include"

.include "Object.dom"
.include "BC.dom"
.include "Variable.dom"
.include "Field.dom"
.include "Type.dom"
.include "Method.dom"
.include "Selector.dom"
#.include "ParamPosition.dom"

#.bddvarorder UCKind0_Field0_BC0_Selector0_Method0_Method1_Variable0_Variable1_ParamPosition0_Type0xType1_Object0_Object1_Object2_Object3_Object4_Object5_Object6_Object7_Object8_Object9
.bddvarorder Object0xObject1_Method0xVariable0_Object3xObject4xObject5_Object2


variablePT				(nowCtxt:Object, now:Object, \
							 thisCtxt:Object, this:Object, \
							 method:Method, variable:Variable, \
							 actContext:Object, object:Object)						input


executionContext		(nowCtxt:Object, now:Object, \
							 thisCtxt:Object, this:Object, \
							 m:Method)												input printsize
							

trackedObjects(oCtxt:Object, o:Object) printsize
trackedObjects(oCtxt, o) :- variablePT(_, _, _, _, _, _, oCtxt, o). 

trackedActivationObjects(oCtxt:Object, o:Object) printsize
trackedActivationObjects(oCtxt, o) :- variablePT(oCtxt, o, _, _, _, _, _, _). 
							
							
escapesActivation(nowCtxt:Object, now:Object, thisCtxt:Object, this:Object, objCtxt:Object, obj:Object) input

escapingObjects(oCtxt:Object, o:Object) printsize
escapingObjects(oCtxt, o) :- escapesActivation(_, _, _, _, oCtxt, o). 

parallel(nowCtxt1:Object, now1:Object, nowCtxt2:Object, now2:Object) input outputtuples printsize

selfParallel(nowCtxt1:Object, now1:Object) printsize
selfParallel(nowCtxt1, now1) :- parallel(nowCtxt1, now1, alsoNowCtxt1, alsoNow1), alsoNowCtxt1=nowCtxt1, alsoNow1=now1.

executedMethods(m:Method) printsize
executedMethods(m) :- executionContext(_,_,_,_,m).

	
member					(type:Type, name:Selector, target:Method)				input
variableType			(method:Method, variable:Variable, type:Type)			input
objectType				(object:Object, type:Type)								input

	
_primitiveArrayType(t:Type) input
_objectArrayType(array:Type, element:Type) input

_isArrayType(type:Type)
_isArrayType(t) :- _primitiveArrayType(t).
_isArrayType(t) :- _objectArrayType(t, _).

executedClasses(t:Type) printsize
executedClasses(t) :- \
	executionContext(_, _, _, _, m), \
	variableType(m, _, t), \
	!_isArrayType(t).
	
executedClasses(elementType) :- \
	executionContext(_, _, _, _, m), \
	variableType(m, _, t), \
	_objectArrayType(t, elementType).
	
#to compute the number of analyzed bytecodes, add the following results:
new						(m:Method, dest:Variable, obj:Object)					input
schedule				(m:Method, bc:BC, dest:Variable, obj:Object, name:Selector)	input
now						(m:Method, variable:Variable)							input
constant				(m:Method, variable:Variable, object:Object)			input
load					(m:Method, variable:Variable, base:Variable, field:Field)	input
staticLoad				(m:Method, dest:Variable, field:Field) 					input
store					(m:Method, base:Variable, field:Field, source:Variable) input
assign					(m:Method, dest:Variable, source:Variable)				input
methodReturn			(m:Method, var:Variable)								input
methodThrow				(m:Method, var:Variable)								input
	
executedDefiningBytecodes(m:Method, v:Variable)	printsize
executedDefiningBytecodes(m, v) :- executedMethods(m), new(m, v, _).
executedDefiningBytecodes(m, v) :- executedMethods(m), schedule(m, _, v, _, _).
executedDefiningBytecodes(m, v) :- executedMethods(m), now(m, v).
executedDefiningBytecodes(m, v) :- executedMethods(m), constant(m, v, _).
executedDefiningBytecodes(m, v) :- executedMethods(m), load(m, v, _, _).
executedDefiningBytecodes(m, v) :- executedMethods(m), staticLoad(m, v, _).
executedDefiningBytecodes(m, v) :- executedMethods(m), assign(m, v, _).
executedDefiningBytecodes(m, v) :- executedMethods(m), methodReturn(m, v).
executedDefiningBytecodes(m, v) :- executedMethods(m), methodThrow(m, v).

	primLoad				(m:Method, base:Variable, field:Field)					input	
	staticPrimLoad			(m:Method, field:Field) 								input
	
	primStore				(m:Method, base:Variable, field:Field) 					input
	staticStore				(m:Method, field:Field, source:Variable) 				input		
	staticPrimStore			(m:Method, field:Field) 								input	
	arrow					(m:Method, lhs:Variable, rhs:Variable)					input


executedPrimLoads(m:Method, base:Variable, field:Field) printsize
executedPrimLoads(m, b, f) :- executedMethods(m), primLoad(m, b, f).

executedStaticPrimLoads(m:Method, field:Field) printsize
executedStaticPrimLoads(m, f) :- executedMethods(m), staticPrimLoad(m, f).

executedPrimStores(m:Method, base:Variable, field:Field) printsize
executedPrimStores(m, b, f) :- executedMethods(m), primStore(m, b, f).

executedStaticStores(m:Method, field:Field, source:Variable) printsize
executedStaticStores(m, f, v) :- executedMethods(m), staticStore(m, f, v).

executedStaticPrimStores(m:Method, field:Field) printsize
executedStaticPrimStores(m, f) :- executedMethods(m), staticPrimStore(m, f).

executedArrows(m:Method, v1:Variable, v2:Variable) printsize
executedArrows(m, v1, v2) :- executedMethods(m), arrow(m, v1, v2).